{"version":3,"sources":["components/InputForm.js","components/Today.js","components/WeekDay.js","components/Week.js","App.js","index.js"],"names":["InputForm","getWeather","handleInput","input","className","onSubmit","e","type","placeholder","value","onChange","Today","weatherData","DAYS","MONTHS","date","sys","name","weather","main","getMonth","getDate","country","getDay","src","icon","alt","Math","round","temp","feels_like","WeekDay","dayData","dt","fullDate","Date","slice","day","Week","weekData","daily","map","timezone","timezone_offset","App","useState","setInput","lat","long","userLocation","setUserLocation","now","week","userWeatherData","setUserWeatherData","selectedWeatherData","setSelectedWeatherData","useEffect","getUserLocation","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","err","isCurrentLocation","a","preventDefault","API_Key","URL","fetch","response","ok","json","data","coord","lon","prevData","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d07e204.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst InputForm = ({ getWeather, handleInput, input }) => (\r\n    <form className='input-form' onSubmit={e => getWeather(e, false)}>\r\n      <input\r\n        type='text'\r\n        className='input-field'\r\n        placeholder='Enter city name...'\r\n        value={input}\r\n        onChange={handleInput}\r\n      />\r\n    </form>\r\n  );\r\n\r\nexport default InputForm;\r\n","import React from 'react';\r\n\r\nconst Today = ({ weatherData, DAYS, MONTHS }) => {\r\n  const { date, sys, name, weather, main } = weatherData;\r\n\r\n  return (\r\n    <div className='today'>\r\n      <div className='today__header'>\r\n        <span className='today__header-title'>\r\n          {`${MONTHS[date.getMonth()]}, ${date.getDate()}`}\r\n        </span>\r\n        <span className='today__header-today today__header-title'>\r\n          {`${name}`} <sup>{`${sys.country}`}</sup>\r\n        </span>\r\n        <span className='today__header-title'>{DAYS[date.getDay()]}</span>\r\n      </div>\r\n      <div className='today__body'>\r\n        <img\r\n          className='today__body-image'\r\n          src={`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`}\r\n          alt=''\r\n        />\r\n        <div className='today__body-temps'>\r\n          <div className='today__body-temp'>{`${Math.round(main.temp)}°C`}</div>\r\n          <div className='today__body-feeltemp'>{`Feels like ${Math.round(\r\n            main.feels_like\r\n          )}°C`}</div>\r\n        </div>\r\n        <span className='today__body-conditions'>{`${weather[0].main}`}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Today;\r\n","import React from 'react';\r\n\r\nconst WeekDay = ({ dayData, DAYS }) => {\r\n  const { dt, weather } = dayData;\r\n  const fullDate = new Date(dt * 1000);\r\n\r\n  return (\r\n    <div className='week__day'>\r\n      <div className='week__day-header'>\r\n        <span className='week__day-date'>{fullDate.getDate()}</span>\r\n        <span className='week__day-day'>{DAYS[fullDate.getDay()].slice(0,3)}</span>\r\n      </div>\r\n      <div className='week__day-body'>\r\n        <img className='week__day-image' src={`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`} alt=''/>\r\n        <span className='week__day-temp'>{`${Math.round(dayData.temp.day)}°C`}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeekDay;\r\n","import React from 'react';\r\nimport WeekDay from './WeekDay';\r\n\r\nconst Week = ({ weekData, DAYS }) => (\r\n  <div className='week'>\r\n    {weekData.daily.map(day => (\r\n      <WeekDay key={day.dt} dayData={day} DAYS={DAYS} timezone={weekData.timezone_offset} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Week;\r\n","import React, { useState, useEffect } from 'react';\nimport InputForm from './components/InputForm';\nimport Today from './components/Today';\nimport Week from './components/Week';\n\nimport './App.css';\n\nconst MONTHS = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December'\n];\n\nconst DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [userLocation, setUserLocation] = useState({\n    lat: null,\n    long: null\n  });\n  const [userWeatherData, setUserWeatherData] = useState({ now: null, week: null });\n  const [selectedWeatherData, setSelectedWeatherData] = useState({ now: null, week: null });\n\n  useEffect(() => {\n    getUserLocation();\n  }, []);\n\n  useEffect(() => {\n    const { lat, long } = userLocation;\n    lat !== null && long !== null && getWeather(null, true);\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [userLocation]);\n\n  const getUserLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        pos => {\n          const { latitude: lat, longitude: long } = pos.coords;\n          setUserLocation({\n            lat,\n            long\n          });\n        },\n        err => {\n          throw err;\n        }\n      );\n    }\n  };\n\n  const handleInput = e => setInput(e.target.value);\n\n  const getWeather = async (e, isCurrentLocation) => {\n    e && e.preventDefault();\n\n    const API_Key = '529c3904f06a70b46ab233d16d1f4eb5';\n    const URL = 'https://api.openweathermap.org/data/2.5/weather';\n\n    let response = isCurrentLocation\n      ? await fetch(\n          `${URL}?lat=${userLocation.lat}&lon=${userLocation.long}&appid=${API_Key}&units=metric`\n        )\n      : await fetch(`${URL}?q=${input}&appid=${API_Key}&units=metric`);\n    if (response.ok) {\n      let data = await response.json();\n      const { lon, lat } = data.coord;\n      const fullDate = new Date(data.dt * 1000);\n      isCurrentLocation\n        ? setUserWeatherData({ ...data, date: fullDate })\n        : setSelectedWeatherData({ ...data, date: fullDate });\n      const URL = 'https://api.openweathermap.org/data/2.5/onecall';\n\n      response = await fetch(\n        `${URL}?lat=${lat}&lon=${lon}&exclude=minutely,alerts&appid=${API_Key}&units=metric`\n      );\n      if (response.ok) {\n        data = await response.json();\n        isCurrentLocation\n          ? setUserWeatherData(prevData => ({ ...prevData, week: data }))\n          : setSelectedWeatherData(prevData => ({ ...prevData, week: data }));\n      } else {\n        throw response;\n      }\n    } else {\n      throw response;\n    }\n  };\n\n  return (\n    <div className='wrapper'>\n      <InputForm getWeather={getWeather} handleInput={handleInput} input={input} />\n\n      {selectedWeatherData.week && (\n        <>\n          <Today weatherData={selectedWeatherData} DAYS={DAYS} MONTHS={MONTHS} />\n          <Week weekData={selectedWeatherData.week} DAYS={DAYS} />\n        </>\n      )}\n\n      {userWeatherData.week && (\n        <>\n          <h2>Your location</h2>\n\t\t\t\t\t<Today weatherData={userWeatherData} DAYS={DAYS} MONTHS={MONTHS} />\n          <Week weekData={userWeatherData.week} DAYS={DAYS} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}