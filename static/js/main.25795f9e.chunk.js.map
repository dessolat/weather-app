{"version":3,"sources":["components/InputForm.js","components/Today.js","components/WeekDay.js","components/Week.js","App.js","index.js"],"names":["InputForm","getWeather","useState","input","setInput","className","onSubmit","event","preventDefault","type","placeholder","value","onChange","target","Today","weatherData","date","sys","name","weather","main","getMonth","getDate","country","getDay","src","icon","alt","Math","round","temp","feels_like","memo","WeekDay","dayData","dt","fullDate","Date","slice","day","Week","weekData","daily","map","timezone","timezone_offset","App","lat","long","userLocation","setUserLocation","now","week","userWeatherData","setUserWeatherData","selectedWeatherData","setSelectedWeatherData","useEffect","getUserLocation","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","err","a","isCurrentLocation","API_Key","URL","fetch","response","ok","json","data","coord","lon","prevData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25795f9e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst InputForm = ({ getWeather }) => {\r\n  const [input, setInput] = useState('');\r\n\r\n  const handleChange = event => {\r\n    setInput(event.target.value);\r\n  };\r\n\r\n\tconst handleSubmit = event => {\r\n\t\tevent.preventDefault();\r\n\t\tgetWeather(input);\r\n\t\tsetInput('');\r\n\t}\r\n\r\n  return (\r\n    <form className='input-form' onSubmit={handleSubmit}>\r\n      <input\r\n        type='text'\r\n        className='input-field'\r\n        placeholder='Enter city name...'\r\n        value={input}\r\n        onChange={handleChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nInputForm.propTypes = {\r\n\tgetWeather: PropTypes.func.isRequired\r\n}\r\n\r\nexport default InputForm;\r\n","import React, { memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Today = ({ weatherData }) => {\r\n  const { date, sys, name, weather, main } = weatherData;\r\n\tconst DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\tconst MONTHS = [\r\n\t\t'January',\r\n\t\t'February',\r\n\t\t'March',\r\n\t\t'April',\r\n\t\t'May',\r\n\t\t'June',\r\n\t\t'July',\r\n\t\t'August',\r\n\t\t'September',\r\n\t\t'October',\r\n\t\t'November',\r\n\t\t'December'\r\n\t];\r\n\t\r\n  return (\r\n    <div className='today'>\r\n      <div className='today__header'>\r\n        <span className='today__header-title'>\r\n          {`${MONTHS[date.getMonth()]}, ${date.getDate()}`}\r\n        </span>\r\n        <span className='today__header-today today__header-title'>\r\n          {`${name}`} <sup>{`${sys.country}`}</sup>\r\n        </span>\r\n        <span className='today__header-title'>{DAYS[date.getDay()]}</span>\r\n      </div>\r\n      <div className='today__body'>\r\n        <img\r\n          className='today__body-image'\r\n          src={`https://openweathermap.org/img/wn/${weather[0].icon}@2x.png`}\r\n          alt=''\r\n        />\r\n        <div className='today__body-temps'>\r\n          <div className='today__body-temp'>{`${Math.round(main.temp)}°C`}</div>\r\n          <div className='today__body-feeltemp'>{`Feels like ${Math.round(\r\n            main.feels_like\r\n          )}°C`}</div>\r\n        </div>\r\n        <span className='today__body-conditions'>{`${weather[0].main}`}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nToday.propTypes = {\r\n\tdate: PropTypes.instanceOf(Date),\r\n\tsys: PropTypes.object, \r\n\tname: PropTypes.string, \r\n\tweather: PropTypes.array, \r\n\tmain: PropTypes.object\r\n}\r\n\r\nexport default memo(Today);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst WeekDay = ({ dayData }) => {\r\n  const { dt, weather } = dayData;\r\n  const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n  const fullDate = new Date(dt * 1000);\r\n  \r\n\treturn (\r\n    <div className='week__day'>\r\n      <div className='week__day-header'>\r\n        <span className='week__day-date'>{fullDate.getDate()}</span>\r\n        <span className='week__day-day'>{DAYS[fullDate.getDay()].slice(0, 3)}</span>\r\n      </div>\r\n      <div className='week__day-body'>\r\n        <img\r\n          className='week__day-image'\r\n          src={`https://openweathermap.org/img/wn/${weather[0].icon}@2x.png`}\r\n          alt=''\r\n        />\r\n        <span className='week__day-temp'>{`${Math.round(dayData.temp.day)}°C`}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nWeekDay.propTypes = {\r\n  dayData: PropTypes.object.isRequired\r\n};\r\n\r\nexport default WeekDay;\r\n","import React, { memo } from 'react';\r\nimport WeekDay from './WeekDay';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Week = ({ weekData }) => (\r\n  <div className='week'>\r\n    {weekData.daily.map(day => (\r\n      <WeekDay key={day.dt} dayData={day} timezone={weekData.timezone_offset} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nWeek.propTypes = {\r\n  weekData: PropTypes.object.isRequired\r\n};\r\n\r\nexport default memo(Week);\r\n","import React, { useState, useEffect } from 'react';\nimport InputForm from './components/InputForm';\nimport Today from './components/Today';\nimport Week from './components/Week';\n\nimport './App.css';\n\nfunction App() {\n  const [userLocation, setUserLocation] = useState({\n    lat: null,\n    long: null\n  });\n  const [userWeatherData, setUserWeatherData] = useState({ now: null, week: null });\n  const [selectedWeatherData, setSelectedWeatherData] = useState({ now: null, week: null });\n\n  useEffect(() => {\n    getUserLocation();\n  }, []);\n\n  useEffect(() => {\n    const { lat, long } = userLocation;\n    lat !== null && long !== null && getWeather('', true);\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [userLocation]);\n\n  const getUserLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        pos => {\n          const { latitude: lat, longitude: long } = pos.coords;\n          setUserLocation({\n            lat,\n            long\n          });\n        },\n        err => {\n          throw err;\n        }\n      );\n    }\n  };\n\n  const getWeather = async (input, isCurrentLocation = false) => {\n    \n    const API_Key = '529c3904f06a70b46ab233d16d1f4eb5';\n    const URL = 'https://api.openweathermap.org/data/2.5/weather';\n\n    let response = isCurrentLocation\n      ? await fetch(\n          `${URL}?lat=${userLocation.lat}&lon=${userLocation.long}&appid=${API_Key}&units=metric`\n        )\n      : await fetch(`${URL}?q=${input}&appid=${API_Key}&units=metric`);\n    if (response.ok) {\n      let data = await response.json();\n      const { lon, lat } = data.coord;\n      const fullDate = new Date(data.dt * 1000);\n      isCurrentLocation\n        ? setUserWeatherData({ ...data, date: fullDate })\n        : setSelectedWeatherData({ ...data, date: fullDate });\n      const URL = 'https://api.openweathermap.org/data/2.5/onecall';\n\n      response = await fetch(\n        `${URL}?lat=${lat}&lon=${lon}&exclude=minutely,alerts&appid=${API_Key}&units=metric`\n      );\n      if (response.ok) {\n        data = await response.json();\n        isCurrentLocation\n          ? setUserWeatherData(prevData => ({ ...prevData, week: data }))\n          : setSelectedWeatherData(prevData => ({ ...prevData, week: data }));\n      } else {\n        throw response;\n      }\n    } else {\n      throw response;\n    }\n  };\n\n  return (\n    <div className='wrapper'>\n      <InputForm getWeather={getWeather} />\n\n      {selectedWeatherData.week && (\n        <>\n          <Today weatherData={selectedWeatherData} />\n          <Week weekData={selectedWeatherData.week} />\n        </>\n      )}\n\n      {userWeatherData.week && (\n        <>\n          <h2>Your location</h2>\n\t\t\t\t\t<Today weatherData={userWeatherData} />\n          <Week weekData={userWeatherData.week} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}